/* Auto-generated by genmsg_cpp for file /home/r00t/ros_workspace/my_adaptor/srv/booleanValue.srv */
#ifndef MY_ADAPTOR_SERVICE_BOOLEANVALUE_H
#define MY_ADAPTOR_SERVICE_BOOLEANVALUE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace my_adaptor
{
template <class ContainerAllocator>
struct booleanValueRequest_ {
  typedef booleanValueRequest_<ContainerAllocator> Type;

  booleanValueRequest_()
  : topicName(false)
  {
  }

  booleanValueRequest_(const ContainerAllocator& _alloc)
  : topicName(false)
  {
  }

  typedef uint8_t _topicName_type;
  uint8_t topicName;


  typedef boost::shared_ptr< ::my_adaptor::booleanValueRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_adaptor::booleanValueRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct booleanValueRequest
typedef  ::my_adaptor::booleanValueRequest_<std::allocator<void> > booleanValueRequest;

typedef boost::shared_ptr< ::my_adaptor::booleanValueRequest> booleanValueRequestPtr;
typedef boost::shared_ptr< ::my_adaptor::booleanValueRequest const> booleanValueRequestConstPtr;


template <class ContainerAllocator>
struct booleanValueResponse_ {
  typedef booleanValueResponse_<ContainerAllocator> Type;

  booleanValueResponse_()
  : topicValue(false)
  {
  }

  booleanValueResponse_(const ContainerAllocator& _alloc)
  : topicValue(false)
  {
  }

  typedef uint8_t _topicValue_type;
  uint8_t topicValue;


  typedef boost::shared_ptr< ::my_adaptor::booleanValueResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_adaptor::booleanValueResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct booleanValueResponse
typedef  ::my_adaptor::booleanValueResponse_<std::allocator<void> > booleanValueResponse;

typedef boost::shared_ptr< ::my_adaptor::booleanValueResponse> booleanValueResponsePtr;
typedef boost::shared_ptr< ::my_adaptor::booleanValueResponse const> booleanValueResponseConstPtr;

struct booleanValue
{

typedef booleanValueRequest Request;
typedef booleanValueResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct booleanValue
} // namespace my_adaptor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::booleanValueRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::booleanValueRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::my_adaptor::booleanValueRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b12fbf18cf61528b9de87da862695ff8";
  }

  static const char* value(const  ::my_adaptor::booleanValueRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb12fbf18cf61528bULL;
  static const uint64_t static_value2 = 0x9de87da862695ff8ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_adaptor::booleanValueRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/booleanValueRequest";
  }

  static const char* value(const  ::my_adaptor::booleanValueRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::my_adaptor::booleanValueRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool topicName\n\
\n\
";
  }

  static const char* value(const  ::my_adaptor::booleanValueRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::my_adaptor::booleanValueRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::booleanValueResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::booleanValueResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::my_adaptor::booleanValueResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5beea4a4e4bddfe01e37a473b6c9fb3c";
  }

  static const char* value(const  ::my_adaptor::booleanValueResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5beea4a4e4bddfe0ULL;
  static const uint64_t static_value2 = 0x1e37a473b6c9fb3cULL;
};

template<class ContainerAllocator>
struct DataType< ::my_adaptor::booleanValueResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/booleanValueResponse";
  }

  static const char* value(const  ::my_adaptor::booleanValueResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::my_adaptor::booleanValueResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool topicValue\n\
\n\
\n\
";
  }

  static const char* value(const  ::my_adaptor::booleanValueResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::my_adaptor::booleanValueResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::my_adaptor::booleanValueRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topicName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct booleanValueRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::my_adaptor::booleanValueResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topicValue);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct booleanValueResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<my_adaptor::booleanValue> {
  static const char* value() 
  {
    return "43f2cc5af874b3c674474abd3ca5e9d8";
  }

  static const char* value(const my_adaptor::booleanValue&) { return value(); } 
};

template<>
struct DataType<my_adaptor::booleanValue> {
  static const char* value() 
  {
    return "my_adaptor/booleanValue";
  }

  static const char* value(const my_adaptor::booleanValue&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<my_adaptor::booleanValueRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "43f2cc5af874b3c674474abd3ca5e9d8";
  }

  static const char* value(const my_adaptor::booleanValueRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<my_adaptor::booleanValueRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/booleanValue";
  }

  static const char* value(const my_adaptor::booleanValueRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<my_adaptor::booleanValueResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "43f2cc5af874b3c674474abd3ca5e9d8";
  }

  static const char* value(const my_adaptor::booleanValueResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<my_adaptor::booleanValueResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/booleanValue";
  }

  static const char* value(const my_adaptor::booleanValueResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MY_ADAPTOR_SERVICE_BOOLEANVALUE_H

