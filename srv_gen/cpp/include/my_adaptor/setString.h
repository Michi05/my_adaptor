/* Auto-generated by genmsg_cpp for file /home/r00t/ros_workspace/my_adaptor/srv/setString.srv */
#ifndef MY_ADAPTOR_SERVICE_SETSTRING_H
#define MY_ADAPTOR_SERVICE_SETSTRING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace my_adaptor
{
template <class ContainerAllocator>
struct setStringRequest_ {
  typedef setStringRequest_<ContainerAllocator> Type;

  setStringRequest_()
  : topicName()
  , newValue()
  {
  }

  setStringRequest_(const ContainerAllocator& _alloc)
  : topicName(_alloc)
  , newValue(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topicName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topicName;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _newValue_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  newValue;


  typedef boost::shared_ptr< ::my_adaptor::setStringRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_adaptor::setStringRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setStringRequest
typedef  ::my_adaptor::setStringRequest_<std::allocator<void> > setStringRequest;

typedef boost::shared_ptr< ::my_adaptor::setStringRequest> setStringRequestPtr;
typedef boost::shared_ptr< ::my_adaptor::setStringRequest const> setStringRequestConstPtr;


template <class ContainerAllocator>
struct setStringResponse_ {
  typedef setStringResponse_<ContainerAllocator> Type;

  setStringResponse_()
  : setAnswer()
  {
  }

  setStringResponse_(const ContainerAllocator& _alloc)
  : setAnswer(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _setAnswer_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  setAnswer;


  typedef boost::shared_ptr< ::my_adaptor::setStringResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_adaptor::setStringResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setStringResponse
typedef  ::my_adaptor::setStringResponse_<std::allocator<void> > setStringResponse;

typedef boost::shared_ptr< ::my_adaptor::setStringResponse> setStringResponsePtr;
typedef boost::shared_ptr< ::my_adaptor::setStringResponse const> setStringResponseConstPtr;

struct setString
{

typedef setStringRequest Request;
typedef setStringResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setString
} // namespace my_adaptor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::setStringRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::setStringRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::my_adaptor::setStringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fbc26b1b656ecf55d4b6b525d0b4db5a";
  }

  static const char* value(const  ::my_adaptor::setStringRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfbc26b1b656ecf55ULL;
  static const uint64_t static_value2 = 0xd4b6b525d0b4db5aULL;
};

template<class ContainerAllocator>
struct DataType< ::my_adaptor::setStringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/setStringRequest";
  }

  static const char* value(const  ::my_adaptor::setStringRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::my_adaptor::setStringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string topicName\n\
string newValue\n\
\n\
";
  }

  static const char* value(const  ::my_adaptor::setStringRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::setStringResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::setStringResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::my_adaptor::setStringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "29ec6205a21c6c9d10f6202c509b169a";
  }

  static const char* value(const  ::my_adaptor::setStringResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x29ec6205a21c6c9dULL;
  static const uint64_t static_value2 = 0x10f6202c509b169aULL;
};

template<class ContainerAllocator>
struct DataType< ::my_adaptor::setStringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/setStringResponse";
  }

  static const char* value(const  ::my_adaptor::setStringResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::my_adaptor::setStringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string setAnswer\n\
\n\
\n\
";
  }

  static const char* value(const  ::my_adaptor::setStringResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::my_adaptor::setStringRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topicName);
    stream.next(m.newValue);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setStringRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::my_adaptor::setStringResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.setAnswer);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setStringResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<my_adaptor::setString> {
  static const char* value() 
  {
    return "b2a8e6a2c24eb6eee63e7e22c2a299fb";
  }

  static const char* value(const my_adaptor::setString&) { return value(); } 
};

template<>
struct DataType<my_adaptor::setString> {
  static const char* value() 
  {
    return "my_adaptor/setString";
  }

  static const char* value(const my_adaptor::setString&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<my_adaptor::setStringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b2a8e6a2c24eb6eee63e7e22c2a299fb";
  }

  static const char* value(const my_adaptor::setStringRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<my_adaptor::setStringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/setString";
  }

  static const char* value(const my_adaptor::setStringRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<my_adaptor::setStringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b2a8e6a2c24eb6eee63e7e22c2a299fb";
  }

  static const char* value(const my_adaptor::setStringResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<my_adaptor::setStringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/setString";
  }

  static const char* value(const my_adaptor::setStringResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MY_ADAPTOR_SERVICE_SETSTRING_H

