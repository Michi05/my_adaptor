/* Auto-generated by genmsg_cpp for file /home/r00t/ros_workspace/my_adaptor/srv/disparityImage.srv */
#ifndef MY_ADAPTOR_SERVICE_DISPARITYIMAGE_H
#define MY_ADAPTOR_SERVICE_DISPARITYIMAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "stereo_msgs/DisparityImage.h"

namespace my_adaptor
{
template <class ContainerAllocator>
struct disparityImageRequest_ {
  typedef disparityImageRequest_<ContainerAllocator> Type;

  disparityImageRequest_()
  : topicName()
  , nImages(0)
  {
  }

  disparityImageRequest_(const ContainerAllocator& _alloc)
  : topicName(_alloc)
  , nImages(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topicName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topicName;

  typedef int64_t _nImages_type;
  int64_t nImages;


  typedef boost::shared_ptr< ::my_adaptor::disparityImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_adaptor::disparityImageRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct disparityImageRequest
typedef  ::my_adaptor::disparityImageRequest_<std::allocator<void> > disparityImageRequest;

typedef boost::shared_ptr< ::my_adaptor::disparityImageRequest> disparityImageRequestPtr;
typedef boost::shared_ptr< ::my_adaptor::disparityImageRequest const> disparityImageRequestConstPtr;


template <class ContainerAllocator>
struct disparityImageResponse_ {
  typedef disparityImageResponse_<ContainerAllocator> Type;

  disparityImageResponse_()
  : images()
  {
  }

  disparityImageResponse_(const ContainerAllocator& _alloc)
  : images(_alloc)
  {
  }

  typedef std::vector< ::stereo_msgs::DisparityImage_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::stereo_msgs::DisparityImage_<ContainerAllocator> >::other >  _images_type;
  std::vector< ::stereo_msgs::DisparityImage_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::stereo_msgs::DisparityImage_<ContainerAllocator> >::other >  images;


  typedef boost::shared_ptr< ::my_adaptor::disparityImageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_adaptor::disparityImageResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct disparityImageResponse
typedef  ::my_adaptor::disparityImageResponse_<std::allocator<void> > disparityImageResponse;

typedef boost::shared_ptr< ::my_adaptor::disparityImageResponse> disparityImageResponsePtr;
typedef boost::shared_ptr< ::my_adaptor::disparityImageResponse const> disparityImageResponseConstPtr;

struct disparityImage
{

typedef disparityImageRequest Request;
typedef disparityImageResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct disparityImage
} // namespace my_adaptor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::disparityImageRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::disparityImageRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::my_adaptor::disparityImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "af8ad02b46d61aef136a826c5d08279b";
  }

  static const char* value(const  ::my_adaptor::disparityImageRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaf8ad02b46d61aefULL;
  static const uint64_t static_value2 = 0x136a826c5d08279bULL;
};

template<class ContainerAllocator>
struct DataType< ::my_adaptor::disparityImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/disparityImageRequest";
  }

  static const char* value(const  ::my_adaptor::disparityImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::my_adaptor::disparityImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string topicName\n\
int64 nImages\n\
\n\
";
  }

  static const char* value(const  ::my_adaptor::disparityImageRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::disparityImageResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::my_adaptor::disparityImageResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::my_adaptor::disparityImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5350e6c86b184588c462e9541f40dbb";
  }

  static const char* value(const  ::my_adaptor::disparityImageResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd5350e6c86b18458ULL;
  static const uint64_t static_value2 = 0x8c462e9541f40dbbULL;
};

template<class ContainerAllocator>
struct DataType< ::my_adaptor::disparityImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/disparityImageResponse";
  }

  static const char* value(const  ::my_adaptor::disparityImageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::my_adaptor::disparityImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "stereo_msgs/DisparityImage[] images\n\
\n\
\n\
\n\
================================================================================\n\
MSG: stereo_msgs/DisparityImage\n\
# Separate header for compatibility with current TimeSynchronizer.\n\
# Likely to be removed in a later release, use image.header instead.\n\
Header header\n\
\n\
# Floating point disparity image. The disparities are pre-adjusted for any\n\
# x-offset between the principal points of the two cameras (in the case\n\
# that they are verged). That is: d = x_l - x_r - (cx_l - cx_r)\n\
sensor_msgs/Image image\n\
\n\
# Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.\n\
float32 f # Focal length, pixels\n\
float32 T # Baseline, world units\n\
\n\
# Subwindow of (potentially) valid disparity values.\n\
sensor_msgs/RegionOfInterest valid_window\n\
\n\
# The range of disparities searched.\n\
# In the disparity image, any disparity less than min_disparity is invalid.\n\
# The disparity search range defines the horopter, or 3D volume that the\n\
# stereo algorithm can \"see\". Points with Z outside of:\n\
#     Z_min = fT / max_disparity\n\
#     Z_max = fT / min_disparity\n\
# could not be found.\n\
float32 min_disparity\n\
float32 max_disparity\n\
\n\
# Smallest allowed disparity increment. The smallest achievable depth range\n\
# resolution is delta_Z = (Z^2/fT)*delta_d.\n\
float32 delta_d\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
";
  }

  static const char* value(const  ::my_adaptor::disparityImageResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::my_adaptor::disparityImageRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topicName);
    stream.next(m.nImages);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct disparityImageRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::my_adaptor::disparityImageResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.images);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct disparityImageResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<my_adaptor::disparityImage> {
  static const char* value() 
  {
    return "bfcb2e11f547d8ad6e76efe895d5f9e7";
  }

  static const char* value(const my_adaptor::disparityImage&) { return value(); } 
};

template<>
struct DataType<my_adaptor::disparityImage> {
  static const char* value() 
  {
    return "my_adaptor/disparityImage";
  }

  static const char* value(const my_adaptor::disparityImage&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<my_adaptor::disparityImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bfcb2e11f547d8ad6e76efe895d5f9e7";
  }

  static const char* value(const my_adaptor::disparityImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<my_adaptor::disparityImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/disparityImage";
  }

  static const char* value(const my_adaptor::disparityImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<my_adaptor::disparityImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bfcb2e11f547d8ad6e76efe895d5f9e7";
  }

  static const char* value(const my_adaptor::disparityImageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<my_adaptor::disparityImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_adaptor/disparityImage";
  }

  static const char* value(const my_adaptor::disparityImageResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MY_ADAPTOR_SERVICE_DISPARITYIMAGE_H

